c3p0-0.8.4.5
	-- Modified all variants of StatementCacheKey, as well as C3P0PooledConnection (proxy Statements)
	   to support jdbc3.0 API for autogenerated keys and ResultSet holdability. All jdbc 3.0 API
	   is now supported.
c3p0-0.8.4.2
	-- Fixed bug in which proxy Statements and ResultSets returned their 
	   naked, unproxied parents from their getConnection() / getStatement()
	   methods. Thanks to Christian Josefsson for noticing this!
	-- Added check to ensure that ResourcePools are not broken prior to
	   posting asynchronous events. It'd be better to factor the (as yet
	   unutilized async event stuff into a subclass to simplify 
	   BasicResourcePool).
	-- Fixed documentation typo that said default numHelperThreads was "false"... 
	   now it's correctly set to "3".
	-- Added extra System.err information to instrument the causes of broken
	   resource pools.
	-- finalize() method of BasicResourcePool checks to be sure user has not
	   already closed the pool before closing, to avoid spurious multiple
	   close warnings. Thanks to Gavin King.
c3p0-0.8.4.1
	-- Added (hopefully not too annoying) dump of DataSource configuration
	   on pool initialization to assist user debugging.
	-- Added methods to force destroy all resources used by a PooledDataSource,
	   even if other DataSource instances are sharing those resources. This is
	   intended primarily for applications that wish to discard the ClassLoader that
	   loaded c3p0, regardless of whatever's currently going on.
	-- Turned off annoying trace messages when a C3P0PooledConnection closes.
	-- Fixed issue in statement cache whereby statements that fail to check-in
	   properly (that throw an exception in "clearParameters") cause an exception
	   in removeStatement, because removeStatement sees a statement that appears
	   neither to be checked-out, nor in the deathmarch for checked-in statements.
	   Resolved by re-adding truculent statement to the checkedOut set, and then
	   destroying using removeStatement's codepath for removing and (force-)destroying
	   checked-out statements. Thanks to Zach Scott for calling attention to
	   this issue.
c3p0-0.8.4
	-- Updated and HTML-ized documentation, updated READMEs. 
c3p0-0.8.4-test5
	-- Includes, but does not yet use, cleaner, nonreflective
	   reimplementation of C3P0PooledConnection and all of the
	   JDBC proxy wrappers. (c3p0-0.8.4 will stick with the old,
	   tested implementation, c3p0-0.8.5 will replace.)
	-- Removed temporary debug wrapper around acquired Connections
	   added in c3p0-0.8.4-test4-3.
c3p0-0.8.4-test4-3
	-- Fixed race condition in BasicResourcePool close(), whereby
	   pooled resources were to be destroyed by an asynchronous thread
	   that itself was shut down by the close() method, so the resource
	   closures did not necessarily occur. Pooled resources are now
	   destroyed synchronously in BasicResourcePool.close()
	-- Fixed erroneous call to C3P0PooledConnection reset() even when
	   the PooledConnection is known to be broken.
	-- Added temporary debug wrapper that dumps a stack trace on physical
	   Connection close() to help Adrian track down a stubborn issue.
c3p0-0.8.4-test4
	-- Made sure PooledConnection's that are known to be broken are not reset()
	   when the ProxyConnection that noticed the break cleans itself up.
	-- Fixed a problem in C3P0PooledConnection's ProxyConnectionInvocationHandler
	   when Connection-invalidating exceptions occurred inside the factored-out
	   doSilentClose() method rather than in the invoke() method. This could lead to
	   broken PooledConnections not being noticed and expunged from the pool 
	   prior to recheck-out.
	-- Ensured stack-trace of any Connection-invalidating Exceptions are
	   logged. (Previously only the messages were logged.)
	-- Access to ProxyConnections is now synchronized to avoid a possible
	   race condition where a Connection could close while another method
	   was in progress.
	-- Cleaned up C3P0PooledConnection a bit, got rid of no longer used
	   reflective code, modified to use new SQL interface filter classes.
	-- Reorganized bean generation stuff to sit under com.mchange.v2.codegen
	-- Added com.mchange.v2.sql.filter package, and code generation stuff so
	   that abstract filter classes that implement JDBC interfaces can be
	   easily regenerated from current versions. (This is preparation for
	   JDK 1.4.x build support.)
c3p0-0.8.4-test3
	-- Reorganized C3P0PooledConnection and C3P0PooledConnectionPool so that
	   PooledConnections only fire connectionErrorOccurred events on errors that
	   signal the Connection is invalid. (Previously we fired the event in all
	   cases, then tested the validity of the connection in the event handler.)
	-- Fixed a bug where SQLExceptions that do not signal invalid Connections
	   (such as an exception on transaction commit under optimistic concurrency)
	   caused Connections to be closed, but still returned to the pool, leaving
	   the pool corrupt. [Thanks to Adrian Petru Dimulescu for discovering and
	   reporting this subtle problem!]
c3p0-0.8.4-test2
	-- Backed off a binary incompatible change to DataSources API. Users
	   interested in statistics about running DataSources will need to
	   cast the result of DataSources.pooledDataSource() to a
	   com.mchange.v2.c3p0.PooledDataSource object. Other users should
	   be able to use DataSources without recompilinbg libraries that
	   depend upon it.
	-- Defined com.mchange.v2.c3p0.ComboPooledDataSource, a single, directly-instantiable
	   JavaBean-style DataSource backed by a c3p0 pool, which makes integration
	   with various app servers easier (e.g. works with Tomcat), and which may
	   provide a more straightforward API for users than DataSources and PoolConfig.
c3p0-0.8.4-test1
        -- Switched various classes from using RoundRobinAsynchronousRunner 
           to a new ThreadPoolAsynchronousRunner.         
        -- Defined PoolingDataSource interface, which permits clients to access
           statistics about the state of underlying pools, and made C3P0 pool-backed
           DataSources implement that interface.
        -- fixed a subtle bug with respect to ownership of shared resources in which
           finalize() methods for discarded DataSources could cause helper threads and
           other resources to be cleaned up prematurely, while they are still in use
           by other DataSources.
        -- major reorganization of code generation for DataSources and the
           resulting objects.
        -- reorganization of Serializable and Referenceable code of DataSources
           for JNDI Binding
        -- made PoolConfig defaults (which are set by system properties, a 
           c3p0.properties file, or else hardcoded defaults) apply to DataSources
           that are directly instantiated rather than created via the 
           com.mchange.v2.c3p0.DataSources factory class.
	-- organized scattered stuff into a self-contained, distributable build
	   directly, and divided source and binary distributions
        -- relicensed library; now available under LGPL.
	-- THERE ARE SOME MAJOR REORGANIZATIONS IN THIS RELEASE. ANY HELP IN
	   TESTING AND FEEDBACK WOULD BE APPRECIATED! THANKS!
c3p0-0.8.3.1
        -- take greater care to abort if a helper thread wakes from wait()
           inside of a broken resource pool
        -- log more debug information if a pool unexpectedly breaks
c3p0-0.8.3
	-- resolved a deadlock arising from ConnectionEventSupport objects
           calling event listener methods while holding the ConnectionEventSupport's
           lock. (Thanks to an anonymous Sourceforge bug submitter for tracking this
           down.)
        -- added two configuration parameters to modify how c3p0 deals with
           potentially unresolved transactions on transaction close -- 
           autoCommitOnClose and forceIgnoreUnresolvedTransactions. c3p0's
           default behavior is as it always was (and as I think it nearly
           always should be) -- by default we roll back any uncommitted work
           on close. See PoolConfig class for complete documentation.
        -- fixed stupid build error that made unzipping c3p0 archives messy
           since c3p0-0.8.2. (SORRY!)
c3p0-0.8.3-pre-travis
        -- fixed problem with c3p0 trying endlessly to connect to a database
           that is down or not present. c3p0 now tries thirty time, once per
           second, then gives up. if there's demand, I'll make the delay and
           number of attempts user configurable. Thanks to Alfonso da Silva
           for calling attention to this problem.
        -- modified RoundRobinAsynchronousRunner to die more gracefully if, 
           somehow, one of its CarefulAsynchronousRunners somehow dies. Thanks to
           Travis Reeder for calling attention to this issue.
        -- modified ResourcePools to allow resources to be tested periodically
           and asynchronously while they are idle in the pool.
        -- added to a new configuration property to PoolConfig and related
           classes, idleConnectionTestPeriod, which if set to a greater-than-zero
           value will cause c3p0 to periodically test idle, pooled connection,
           and remove them from the pool if they are broken.  Thanks to
           Travis Reeder for calling attention to this issue.
        -- removed SQLState 08S01 from the set of SQL states presumed to mean
           all connections in the pool have become invalid. Apparently MySQL
           uses this SQLState to indicate the timing out of idle, individual
           connections.  Thanks to Travis Reeder for calling attention to this issue.
        -- many (!) bug-fixes, small tweaks and improvements.
        -- temporarily sprinkled some debugging output prefixed "c3p0-TRAVIS" to 
           try to resolve some issues for Travis Reeder
c3p0-0.8.2
        -- Addressed a rare problem that ocurred when application servers or
           other external code calls interrupt() on c3p0 helper threads. Thanks 
	   to Travis Reeder for reporting this issue! The endless cascade of 
	   ArrayIndexOutOfBoundsException that would occasionallY result has 
	   been fixed, and c3p0 helper threads now ignore interupts,
           which should almost completely prevent such interrupts() 
           from leaving c3p0 pools in a corrupt state. [In the very, very
	   unlikely event that multiple, well-timed interrupts() cause
	   a pool to diagnose itself broken, c3p0 will start throwing clear 
	   exceptions to indicate that -- there shouldn't be any deadlock or
	   any subtle kind of corruption.]
	-- Deprecated PoolBackedDataSourceFactory and DriverManagerDataSourceFactory
	   in favor of the newer DataSources class.
        -- Updated example code and documentation.
	-- Moved constants from DataSources to PoolConfig where they belong!
c3p0-0.8.2-pre10
        -- Removed use of properties default mechanism in setting up JDBC
           properties for DriverManagerDataSource, as some drivers use get()
           rather than getProperties(), and the Properties.get() method ignores
           defaults. [Thanks go to Michael Jakl <mj@int-x.org> for both finding
           and fixing this problem!!!]
        -- Fixed subtle problem whereby the introspective constructor of 
           C3P0PooledConnectionPoolManager would inadvertently check out an
           extra pooled connection, by treating the getPooledConnection() as
           a simple property read and invoking it. [Thanks go to Michael Jakl 
           <mj@int-x.org> for both finding and fixing this bug!!!]
c3p0-0.8.2-pre9
        -- Finished DataSources static factory for, um, DataSources.
        -- Added PoolConfig class to encapsulate all configuration
           information from factories
	-- Set up PoolConfig to pay attention to (in order):
             1) explicit, user-defined parameters
             2) parameters defined as System properties
             3) parameters defined in a Properties file resource, at
                resource pasth /c3p0.properties in PoolConfig's classloader
	     4) Hardcoded defaults from the C3P0Defaults class
        -- Defined a new pool configuration property, "testConnectionOnCheckout".
           If set to true (it defaults to false), each pooled Connection will be 
           verified at checkout time, before being supplied to clients. THIS SLOWS
           CONNECTION CHECKOUT DRAMATICALLY (by an order of magnitude on my machine),
           but some folks may want it. The expensive, verified Connections are still
           faster to acquire than brand new ones.
        -- If a Connection experiences an SQLException with a defined SQL State of
           08001, 08007, or 08S01, the entire database is considered to have been
           shutdown, and the pool whose connection experienced the problem is reset 
           -- i.e. all existing Connections are discarded, and new Connections are 
           acquired for the pool. (Thanks! to Gavin King for suggesting the SQL State
           approach to detecting disconnects.)
        -- ConnectionTester interface and its default implementation were modified
           to support reporting DATABASE_IS_INVALID (rather than simply testing a
           disconnected, individual Connection).
c3p0-0.8.2-pre8
        -- Fixed some really stupid bugs from pre-7, in particular
           the static factory methods of the DataSources class were
           not declared static. Oops. 
c3p0-0.8.2-pre7
        -- Major reorganization of data source implementations. These
           are now generated from XML templates, because it was becoming
           difficult to keep multiple versions of multiple types of 
           datasources in sync with one another
        -- a new factory / utility class has been added, 
           com.mchange.v2.c3p0.DataSources.
           Soon the older factories (DriverManagerDataSourceFactory and 
           PoolBackedDataSourceFactory) will be deprecated in favor of this.
        -- Began adding support for wrapper DataSources that lazily bind to 
           an unpooled DataSource specified via JNDI. (Current wrappers require
           an actual instance, not a mere reference in order to construct a
           PoolBacked or ConnectionPoolDataSource).
c3p0-0.8.2-pre6
	-- Fixed bug that led to ConcurrentModificationException
	   when Connection.close() iterates through and closes
	   its unclosed Statements.
	-- Fixed bug that caused uncached Statements to sometimes
	   be closed twice, as they were not properly removed from
	   the set of Connection-associated statements on user-
           initiated Statement.close(), and would thus be closed 
           again on Connection.close().
	-- Reorganized classes to clean up top-level com.mchange.v2.c3p0
	   package. The gory innards of c3p0 now live in an impl package.
	-- Reorganized DataSources so that there are "Base" versions suitable
	   for DBMS-specific subclassing.
c3p0-0.8.2-pre5
        -- DataSources looked up by JNDI now "coalesce" -- i.e., if
           two separate calls look-up the same JNDI bound DataSource,
           they will both see the same DataSource instance in the local
           VM. This is especially important for PoolBackedDataSources, as they
           own "helper threads" that help to manage the pool. Now each
           logical DataSource shares the same pool of helper threads,
           regardless of whether it is looked up once and cached, or
	   looked up multiple times and at multiple places by an application. 
        -- Number of helper-threads managing a PoolBackedDataSource is now
           user-configurable
c3p0-0.8.2-pre4
        -- Fixed BAD memory leak -- cachedStatements were being retained
           on close. This brings a performance improvement to
	   the StatementCache as well.
	-- Set-up StatementCacheKey to coalesce, such that its equals
	   method can look like {return (this == o);}. Unfortunately, I
	   did not see the kind of performance increase I'd anticipated
	   from this... in fact, whatever performance changes I did see were
	   pretty negligable. Performed some other, mostly useless, optimizations
	   to the process of acquiring StatementCacheKeys. (I can't decide...
           I've got 3 usuable, broadly similar versions of StatementCacheKey now.)
	-- Fixed bugs having to do with when to create and the daemon status
	   of Timers
	-- Appropriately synchronized access to PoolBackedDataSource. (This
	   should permit me to pull back on synchronization / marking of
	   volatile in some dependent classes, as access to these is now 
           controlled via PoolBackedDataSource.)
	-- Made instantion of C3P0PooledConnectionPoolManager 
           by WrapperPoolBackedDataSource "lazy", so that Timer / Async task
	   threads are only started up when a Connection is actually requested 
	   from a DataSource. This is useful especially for the instance residing
	   in the JNDI server VM, whose purpose is likely only to serve as an
	   instance to be looked up over the network. There's no reason why
	   it should keep several stalled Threads open.
	-- Fixed DefaultConnectionTester, whose logic was bass-ackwards.
c3p0-0.8.2-pre3
	-- Factory method for StatementCacheKeys now "coalesce" equivalent 
	   instances to conserve memory and to enable a fast (this == o) test 
	   to usually work in equals methods. [Value test remains for when 
	   identity test fails... maybe later I'll be more comfortable with a 
	   1 instance per value guarantee, and remove the rest of the test. 
	   As the constructor is private, the factory method coalesces, and the 
	   class is not Serializable, an identity test should suffice. But 
	   I'm paranoid.]

	-- All asynchronous tasks are now distributed to 3 helper threads per 
	   DataSource rather than queuing on just one. (Culing of expired 
	   Connections is still managed by a single java.util.Timer... I don't 
	   think this will be a problem.)

c3p0-0.8.2-pre2
	-- Total rewite of Statement cache!

